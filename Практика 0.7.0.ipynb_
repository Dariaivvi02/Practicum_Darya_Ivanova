{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730304469544}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["  Иванова Дарья Сергеевна"],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","\n","\n","def get_weather(lat, lon):\n","    url = f\"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true\"\n","\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        data = response.json()\n","        weather = data['current_weather']\n","        temperature = weather['temperature']\n","        weather_desc = weather['weathercode']\n","\n","        if weather_desc == 0:\n","            weather_type = \"ясно\"\n","        elif weather_desc == 1:\n","            weather_type = \"малооблачно\"\n","        elif weather_desc == 2:\n","            weather_type = \"облачно\"\n","        elif weather_desc == 3:\n","            weather_type = \"небольшой дождь\"\n","\n","        return temperature, weather_type\n","    else:\n","        print(\"Ошибка\", response.status_code)\n","        return None\n","\n","\n","def main():\n","    user_input = input(\"Введите координаты (широта, долгота): \")\n","    lat, lon = map(float, user_input.split(','))\n","\n","    today = \"1.11\"\n","    temperature, weather_type = get_weather(lat, lon)\n","\n","    if temperature is not None:\n","        print(f\"Сегодня ({today}) погода {temperature} ◦С, {weather_type}\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730307636113,"user_tz":-300,"elapsed":4065,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"31722701-2db9-4b92-f151-94aeb31873f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите координаты (широта, долгота):  56.50, 60.35\n","Сегодня (1.11) погода -1.2 ◦С, небольшой дождь\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"DoEJcrkY8sVz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import http.client\n","import json\n","\n","\n","def list_pokemon():\n","    conn = http.client.HTTPSConnection(\"pokeapi.co\")\n","    conn.request(\"GET\", \"/api/v2/pokemon?limit=20\")\n","\n","    response = conn.getresponse()\n","\n","    if response.status == 200:\n","        data = response.read().decode()\n","        pokemon_data = json.loads(data)\n","        return [pokemon['name'] for pokemon in pokemon_data['results']]\n","    else:\n","        print(\"Ошибка при получении списка покемонов.\")\n","        return []\n","\n","\n","def pok_inf(pokemon_name):\n","    conn = http.client.HTTPSConnection(\"pokeapi.co\")\n","    conn.request(\"GET\", f\"/api/v2/pokemon/{pokemon_name}\")\n","\n","    response = conn.getresponse()\n","\n","    if response.status == 200:\n","        data = response.read().decode()\n","        pokemon_info = json.loads(data)\n","        return {\n","            'name': pokemon_info['name'],\n","            'types': [type_info['type']['name']\n","                      for type_info in pokemon_info['types']],\n","            'weight': pokemon_info['weight'],\n","            'height': pokemon_info['height'],\n","            'abilities': [ability['ability']['name']\n","                          for ability in pokemon_info['abilities']]\n","        }\n","    else:\n","        print(f\"Ошибка при получении информации о покемоне {pokemon_name}.\")\n","        return None\n","\n","\n","def main():\n","    pokemon_list = list_pokemon()\n","    print(\"Список первых 20 покемонов:\")\n","    for idx, name in enumerate(pokemon_list, start=1):\n","        print(f\"{idx}. {name}\")\n","\n","    pokemon_name = input(\"\\nВведите имя покемона: \").lower()\n","    pokemon_info = pok_inf(pokemon_name)\n","\n","    if pokemon_info:\n","        print(\"\\nИнформация о покемоне:\")\n","        print(f\"Имя: {pokemon_info['name']}\")\n","        print(f\"Тип: {', '.join(pokemon_info['types'])}\")\n","        print(f\"Вес: {pokemon_info['weight']}\")\n","        print(f\"Рост: {pokemon_info['height']}\")\n","        print(f\"Способности: {', '.join(pokemon_info['abilities'])}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730306937624,"user_tz":-300,"elapsed":45451,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"75572800-f48d-4eac-ca6e-fec939a93e2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Список первых 20 покемонов:\n","1. bulbasaur\n","2. ivysaur\n","3. venusaur\n","4. charmander\n","5. charmeleon\n","6. charizard\n","7. squirtle\n","8. wartortle\n","9. blastoise\n","10. caterpie\n","11. metapod\n","12. butterfree\n","13. weedle\n","14. kakuna\n","15. beedrill\n","16. pidgey\n","17. pidgeotto\n","18. pidgeot\n","19. rattata\n","20. raticate\n","\n","Введите имя покемона: rattata\n","\n","Информация о покемоне:\n","Имя: rattata\n","Тип: normal\n","Вес: 35\n","Рост: 3\n","Способности: run-away, guts, hustle\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        return []\n","\n","\n","def get_id_post(post_id):\n","    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'\n","    return send_request(url)\n","\n","\n","def main():\n","    post_id=input('Введите ID ')\n","    post_data=get_id_post(post_id)\n","    title = post_data.get('title', 'Заголовок не найден')\n","    body=post_data.get('body','Заголовок не найден')\n","\n","    if post_data:\n","        print(post_data)\n","        message=f'ID {post_id} заголовок {title} body {body}'\n","        print(f'ID :{post_id}')\n","        print(f'Заголовок: {title}')\n","        print(f'Body: {body}')\n","\n","    else:\n","        print(\"ID не найдено\")\n","\n","\n","main()"],"metadata":{"id":"YANQx4o258Zn","executionInfo":{"status":"ok","timestamp":1733910547914,"user_tz":-300,"elapsed":8757,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bc3747d9-c0b3-4dd3-8ef4-b2a65ed6353c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ID 36\n","{'userId': 4, 'id': 36, 'title': 'fuga nam accusamus voluptas reiciendis itaque', 'body': 'ad mollitia et omnis minus architecto odit\\nvoluptas doloremque maxime aut non ipsa qui alias veniam\\nblanditiis culpa aut quia nihil cumque facere et occaecati\\nqui aspernatur quia eaque ut aperiam inventore'}\n","ID :36\n","Заголовок: fuga nam accusamus voluptas reiciendis itaque\n","Body: ad mollitia et omnis minus architecto odit\n","voluptas doloremque maxime aut non ipsa qui alias veniam\n","blanditiis culpa aut quia nihil cumque facere et occaecati\n","qui aspernatur quia eaque ut aperiam inventore\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests\n","def send_request(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        return response.json()\n","    else:\n","        return []\n","\n","\n","def get_id_post(post_id):\n","    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'\n","    return send_request(url)\n","\n","\n","def new_post():\n","    title = input('Введите заголовок поста: ')\n","    body = input('Введите содержимое поста: ')\n","    user_id = input('Введите ID пользователя: ')\n","    post_data = {\n","        'title': title,\n","        'body': body,\n","        'userId': user_id\n","    }\n","    url = 'https://jsonplaceholder.typicode.com/posts'\n","    response = requests.post(url, json=post_data)\n","    if response.status_code == 200:\n","        return response.json()\n","\n","\n","def update_post(post_id):\n","    new_title = input('Введите новый заголовок: ')\n","    new_body = input('Введите новое содержимое поста: ')\n","    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'\n","    updated_data = {\n","        'title': new_title,\n","        'body': new_body,\n","        'userId': post_id\n","    }\n","    response = requests.put(url, json=updated_data)\n","\n","    if response.status_code == 200 or response.status_code == 202:\n","        return response.json()\n","\n","def delete_post(post_id):\n","    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'\n","    response = requests.delete(url)\n","    return response.status_code\n","\n","\n","def main():\n","    post_id = input('Введите ID поста для получения: ')\n","    post_data = get_id_post(post_id)\n","    title = post_data.get('title', 'Заголовок не найден')\n","    body = post_data.get('body', 'Содержимое не найдено')\n","\n","    if post_data:\n","        print(f'ID: {post_id}')\n","        print(f'Заголовок: {title}')\n","        print(f'Содержимое: {body}')\n","\n","    print(\"Создание нового поста:\")\n","    created_post = new_post()\n","\n","    if created_post:\n","        print(\"Созданный пост:\", created_post)\n","    post_id_to_update = input('Введите ID поста для обновления: ')\n","    updated_post = update_post(post_id_to_update)\n","\n","    if updated_post:\n","        print(\"Обновленный пост:\", updated_post)\n","    post_id_to_delete = input('Введите ID поста для удаления: ')\n","    status_code = delete_post(post_id_to_delete)\n","    print(f'{post_id_to_delete}: {status_code}')\n","\n","\n","main()"],"metadata":{"id":"jZUIdwq96DNl","executionInfo":{"status":"ok","timestamp":1733910718591,"user_tz":-300,"elapsed":86905,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef4bc213-8806-4c26-f8b9-5de8e7204c13"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ID поста для получения: 10\n","ID: 10\n","Заголовок: optio molestias id quia eum\n","Содержимое: quo et expedita modi cum officia vel magni\n","doloribus qui repudiandae\n","vero nisi sit\n","quos veniam quod sed accusamus veritatis error\n","Создание нового поста:\n","Введите заголовок поста: optio molestias id quia eum\n","Введите содержимое поста: Весна\n","Введите ID пользователя: 15\n","Введите ID поста для обновления: 25\n","Введите новый заголовок: Система \n","Введите новое содержимое поста: Осень\n","Обновленный пост: {'title': 'Система ', 'body': 'Осень', 'userId': '25', 'id': 25}\n","Введите ID поста для удаления: 25\n","25: 200\n"]}]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","\n","def get_breeds_list():\n","    url = \"https://dog.ceo/api/breeds/list/all\"\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        breeds_dict = response.json()[\"message\"]\n","        breeds_list = list(breeds_dict.keys())\n","        for i in range(len(breeds_list)):\n","            print(str(i+1) + '.' + breeds_list[i])\n","\n","\n","def input_breeds():\n","    user_input = input(\"Введите породы собак через запятую: \")\n","    breeds = [breed.strip().lower() for breed in user_input.split(\",\")]\n","    return breeds\n","\n","\n","def fetch_and_display_images(breeds):\n","    base_url = \"https://dog.ceo/api/breed/{}/images/random\"\n","\n","    for breed in breeds:\n","        url = base_url.format(breed)\n","        response = requests.get(url)\n","\n","        if response.status_code == 200:\n","            image_url = response.json()[\"message\"]\n","\n","            res = requests.get(image_url)\n","            img = Image.open(io.BytesIO(res.content))\n","            display(img)\n","\n","\n","print(get_breeds_list())\n","print(fetch_and_display_images(input_breeds()))"],"metadata":{"id":"5xti3KRP4Kzp","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1-8EtDMh3lHFxzcUe929035uBdMj8-KfH"},"executionInfo":{"status":"ok","timestamp":1733981989919,"user_tz":-300,"elapsed":31071,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"c35d40c4-2135-4b55-8114-de396e923fdd"},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}