{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732096953475}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["Иванова Дарья Сергеевна"],"metadata":{"id":"4ASakEk-Bkat"}},{"cell_type":"markdown","source":[],"metadata":{"id":"ZTLizk27Besz"}},{"cell_type":"markdown","source":[],"metadata":{"id":"6-ftra35Bcf5"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    # количество дней отпуска, атрибут для каждого объекта класса\n","    vacation_days = 28\n","\n","    def __init__(self, first_name, second_name, gender, amount_of_limbs):\n","        self.first_name = first_name # имя\n","        self.second_name = second_name # фамилия\n","        self.gender = gender # пол\n","        self.amount_of_limbs = amount_of_limbs # количество конечностей\n","        self.remaining_vacation_days = self.vacation_days # количество доступных дней отпуска\n","\n","\n","    # вычитание отгуляных дней\n","    def consume_vacation(self, days):\n","        self.remaining_vacation_days -= days\n","\n","    # Вывод информации об отпуске\n","    def vacation_details(self):\n","        return f\"Остаток отпускных дней: {self.remaining_vacation_days}.\"\n","\n","\n","employee = Employee('Олег', \"Крутой\", \"м\", \"4\")\n","employee2 = Employee('Олег', \"не очень Крутой\", \"м\", \"3\")\n","print('='*20,'\\n',\n","      employee.first_name,'\\n',\n","      employee.second_name,'\\n',\n","      employee.amount_of_limbs,'\\n',\n","      employee.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('='*20,'\\n',\n","      employee2.first_name,'\\n',\n","      employee2.second_name,'\\n',\n","      employee2.amount_of_limbs,'\\n',\n","      employee2.remaining_vacation_days,'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('Олег Крутой в Майами на 10 дней')\n","employee.consume_vacation(10)\n","print('Олег не очень Крутой в Сыктывкар на 4 дней')\n","employee2.consume_vacation(4)\n","\n","\n","print('='*20,'\\n',\n","      employee.first_name,'\\n',\n","      employee.second_name,'\\n',\n","      employee.amount_of_limbs,'\\n',\n","      employee.vacation_details(),'\\n',\n","      '='*20,'\\n'\n","      )\n","\n","print('='*20,'\\n',\n","      employee2.first_name,'\\n',\n","      employee2.second_name,'\\n',\n","      employee2.amount_of_limbs,'\\n',\n","      employee2.vacation_details(),'\\n',\n","      '='*20,'\\n'\n","      )\n"],"metadata":{"id":"G4bUraN4CwBI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732098558899,"user_tz":-300,"elapsed":297,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"a315ecd8-041f-4d70-eed2-e0999d2da0b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["==================== \n"," Олег \n"," Крутой \n"," 4 \n"," 28 \n"," ==================== \n","\n","==================== \n"," Олег \n"," не очень Крутой \n"," 3 \n"," 28 \n"," ==================== \n","\n","Олег Крутой в Майами на 10 дней\n","Олег не очень Крутой в Сыктывкар на 4 дней\n","==================== \n"," Олег \n"," Крутой \n"," 4 \n"," Остаток отпускных дней: 18. \n"," ==================== \n","\n","==================== \n"," Олег \n"," не очень Крутой \n"," 3 \n"," Остаток отпускных дней: 24. \n"," ==================== \n","\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","\n","  def __init__(self, width, height):\n","    self.width = width\n","    self.height = height\n","\n","  def square(self):\n","    return self.width * self.width\n","\n","  def perimeter(self):\n","    return 2 * (self.width + self.width)\n","\n","  def size(self):\n","    print(f\"ширина: {self.width}, высота: {self.height}\")\n","\n","rectangle = Rectangle(7, 4)\n","\n","rectangle.size()\n","print(f\"площадь: {rectangle.square()}\")\n","print(f\"периметр: {rectangle.perimeter()}\")\n","\n","\n","\n"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732100849332,"user_tz":-300,"elapsed":296,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"e8648f22-2e31-47d7-b826-7f9ce4d72c56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ширина: 7, высота: 4\n","площадь: 49\n","периметр: 28\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","        if amount > 0:\n","            self.balance += amount\n","            print(f\"на счет {self.account_holder} внесено {amount} рублей. Текущий баланс: {self.balance}\")\n","        else:\n","            print(\"Ошибка\")\n","\n","    def withdraw(self, amount):\n","        if amount > 0:\n","            if amount <= self.balance:\n","                self.balance -= amount\n","                print(f\"с счета {self.account_holder} снято {amount} рублей. Текущий баланс: {self.balance}\")\n","            else:\n","                print(f\"Недостаточно средств на счете {self.account_holder}. Текущий баланс: {self.balance}\")\n","        else:\n","            print(\"Ошибка\")\n","\n","    def get_balance(self):\n","        return self.balance\n","\n","account = BankAccount(\"Олега Олеговича\")\n","\n","account.deposit(10000)\n","account.withdraw(5000)\n","account.withdraw(300)\n","print(f\"Текущий баланс: {account.get_balance()}\")\n","\n","\n","\n","\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732102105887,"user_tz":-300,"elapsed":298,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"3fc2e43b-d194-47da-c64a-b0ca6daf63ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["на счет Олега Олеговича внесено 10000 рублей. Текущий баланс: 10000\n","с счета Олега Олеговича снято 5000 рублей. Текущий баланс: 5000\n","с счета Олега Олеговича снято 300 рублей. Текущий баланс: 4700\n","Текущий баланс: 4700\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","\n","class Character:\n","    def __init__(self, name, health, damage_range):\n","      self.name = name\n","      self.health = health\n","      self.damage_range = damage_range\n","\n","    def attack(self, other):\n","        damage = random.randint(*self.damage_range)\n","        other.health -= damage\n","        print(f\"{self.name} атакует {other.name} и наносит {damage} урона\")\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","class Knight(Character):\n","    def __init__(self, name, armor, weapon):\n","        super().__init__(name, health=100, damage_range=(5, 15))\n","        self.armor = armor\n","        self.weapon = weapon\n","\n","class Dragon(Character):\n","    def __init__(self):\n","        super().__init__(name=\"Дракон - Горыныч\", health=80, damage_range=(5, 15))\n","\n","def create_knight():\n","    name = input(\"введите имя рыцаря: \")\n","    armor = input(\"введите информацию о доспехах: \")\n","    weapon = input(\"введите название оружия: \")\n","    knight = Knight(name, armor, weapon)\n","    print(f\"\\nРыцарь {knight.name} создан\")\n","\n","    return knight\n","\n","def create_dragon():\n","    dragon = Dragon()\n","    print(f\"\\nВы встретили {dragon.name}\")\n","\n","    return dragon\n","\n","def battle(knight, dragon):\n","    while knight.is_alive() and dragon.is_alive():\n","        knight.attack(dragon)\n","        print(f\"Здоровье {dragon.name}: {dragon.health}\")\n","\n","        if not dragon.is_alive():\n","            print(f\"\\n{knight.name} победил {dragon.name}\")\n","            return\n","\n","        dragon.attack(knight)\n","        print(f\"Здоровье {knight.name}: {knight.health}\")\n","\n","        if not knight.is_alive():\n","            print(f\"\\n{dragon.name} победил {knight.name}\")\n","            return\n","\n","def main():\n","    print(\"В далеком королевстве появился дракон. Он похитил принцессу. Легенды гласят, что только храбрый рыцарь сможет освободить принцессу\")\n","    knight = create_knight()\n","    dragon = create_dragon()\n","    battle(knight, dragon)\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732103441916,"user_tz":-300,"elapsed":13863,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"9876e4f9-46b7-4d5c-de1d-8b74a4645877"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["В далеком королевстве появился дракон. Он похитил принцессу. Легенды гласят, что только храбрый рыцарь сможет освободить принцессу\n","введите имя рыцаря: Олег\n","введите информацию о доспехах: кольчуга\n","введите название оружия: меч\n","\n","Рыцарь Олег создан\n","\n","Вы встретили Дракон - Горыныч\n","Олег атакует Дракон - Горыныч и наносит 9 урона\n","Здоровье Дракон - Горыныч: 71\n","Дракон - Горыныч атакует Олег и наносит 9 урона\n","Здоровье Олег: 91\n","Олег атакует Дракон - Горыныч и наносит 12 урона\n","Здоровье Дракон - Горыныч: 59\n","Дракон - Горыныч атакует Олег и наносит 15 урона\n","Здоровье Олег: 76\n","Олег атакует Дракон - Горыныч и наносит 10 урона\n","Здоровье Дракон - Горыныч: 49\n","Дракон - Горыныч атакует Олег и наносит 5 урона\n","Здоровье Олег: 71\n","Олег атакует Дракон - Горыныч и наносит 15 урона\n","Здоровье Дракон - Горыныч: 34\n","Дракон - Горыныч атакует Олег и наносит 5 урона\n","Здоровье Олег: 66\n","Олег атакует Дракон - Горыныч и наносит 15 урона\n","Здоровье Дракон - Горыныч: 19\n","Дракон - Горыныч атакует Олег и наносит 10 урона\n","Здоровье Олег: 56\n","Олег атакует Дракон - Горыныч и наносит 13 урона\n","Здоровье Дракон - Горыныч: 6\n","Дракон - Горыныч атакует Олег и наносит 9 урона\n","Здоровье Олег: 47\n","Олег атакует Дракон - Горыныч и наносит 13 урона\n","Здоровье Дракон - Горыныч: -7\n","\n","Олег победил Дракон - Горыныч\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":[],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}