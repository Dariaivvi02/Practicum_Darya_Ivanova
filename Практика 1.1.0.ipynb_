{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732700656402}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Иванова Дарья Сергеевна"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","  def __init__(self, name, salary):\n","    self.name = name\n","    self.salary = salary\n","\n","\n","  def salary_calculation(self):\n","    return self.salary\n","\n","\n","  def __str__(self):\n","    return f\"Employee: {self.name}, Salary: {self.salary_calculation()}\"\n","\n","\n","class Manager(Employee):\n","  def __init__(self, name, salary, prize):\n","    super().__init__(name, salary)\n","    self.prize = prize\n","\n","\n","  def salary_calculation(self):\n","    return self.salary + self.prize\n","\n","\n","  def __str__(self):\n","    return f\"Manager: {self.name}, Salary: {self.salary_calculation()} (Prize: {self.prize})\"\n","\n","\n","class Developer(Employee):\n","  def __init__(self, name, salary, finish_projects):\n","    super().__init__(name, salary)\n","    self.finish_projects = finish_projects\n","\n","\n","  def salary_calculation(self):\n","    project_prize = 1000 * self.finish_projects\n","    return self.salary + project_prize\n","\n","\n","  def __str__(self):\n","        return f\"Developer: {self.name}, Salary: {self.salary_calculation()} (Finish  Projects: {self.finish_projects})\"\n","\n","\n","if __name__ == \"__main__\":\n","  emp = Employee(\"Александр\", 40000)\n","  mgr = Manager(\"Светлана\", 50000, 10000)\n","  dev = Developer(\"Олег\", 45000, 10)\n","\n","  print(emp)\n","  print(mgr)\n","  print(dev)"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732703930545,"user_tz":-300,"elapsed":271,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"c8de4117-de24-4dcd-e52a-79eba5c12b64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Employee: Александр, Salary: 40000\n","Manager: Светлана, Salary: 60000 (Prize: 10000)\n","Developer: Олег, Salary: 55000 (Finish  Projects: 10)\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Vehicle:\n","  def describe(self):\n","    return True\n","\n","\n","class Car(Vehicle):\n","  def __init__(self, compose, model):\n","    self.compose = compose\n","    self.model = model\n","\n","\n","  def describe(self):\n","    return f\"Автомобиль: {self.compose} {self.model}\"\n","\n","\n","class Bike(Vehicle):\n","  def __init__(self, compose, type_bike):\n","    self.compose = compose\n","    self.type_bike = type_bike\n","\n","\n","  def describe(self):\n","    return f\"Мотоцикл: {self.compose}, Тип: {self.type_bike}\"\n","\n","\n","class Bicycle(Vehicle):\n","  def __init__(self, compose, weight):\n","    self.compose = compose\n","    self.weight = weight\n","\n","\n","  def describe(self):\n","    return f\"Велосипед: {self.compose}, Вес: {self.weight} кг\"\n","\n","\n","if __name__ == \"__main__\":\n","  vehicles = [\n","      Car(\"Toyota\", \"Camry\"),\n","      Bike(\"Honda\", \"Scooter\"),\n","      Bicycle(\"Cycleurope\", 16 )\n","  ]\n","\n","  for vehicle in vehicles:\n","      print(vehicle.describe())"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732707283640,"user_tz":-300,"elapsed":276,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"9410e562-6f6b-4936-b867-b7d8ca6987bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Автомобиль: Toyota Camry\n","Мотоцикл: Honda, Тип: Scooter\n","Велосипед: Cycleurope, Вес: 16 кг\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","    def __init__(self, name, price, warehouse, category):\n","        self.name = name\n","        self.price = price\n","        self.warehouse = warehouse\n","        self.category = category\n","\n","\n","    def is_in_warehouse(self, count):\n","        return self.warehouse >= count\n","\n","    def update_warehouse(self, count):\n","        self.warehouse -= count\n","\n","\n","class Order:\n","    def __init__(self):\n","        self.items = []\n","        self.total = 0\n","\n","    def add_item(self, product, count):\n","        if product.is_in_warehouse(count):\n","            self.items.append((product, count))\n","            product.update_warehouse(count)\n","            self.calculate_total()\n","        else:\n","            print(f\"Товара {product.name} нет на складе\")\n","\n","    def calculate_total(self):\n","        self.total = sum(item[0].price * item[1] for item in self.items)\n","\n","    def apply_discount(self, discount_percentage):\n","        discount_amount = self.total * (discount_percentage / 100)\n","        self.total -= discount_amount\n","        return discount_amount\n","\n","    def calculate_tax(self, tax_percentage):\n","        tax_amount = self.total * (tax_percentage / 100)\n","        self.total += tax_amount\n","        return tax_amount\n","\n","\n","class Customer:\n","    def __init__(self, name, email):\n","        self.name = name\n","        self.email = email\n","        self.order_history = []\n","\n","    def add_order(self, order):\n","        self.order_history.append(order)\n","\n","\n","class ShoppingCart:\n","    def __init__(self):\n","        self.items = {}\n","\n","    def add_product(self, product, count):\n","        if product.name in self.items:\n","            self.items[product.name]['count'] += count\n","        else:\n","            self.items[product.name] = {'product': product, 'count': count}\n","\n","    def remove_product(self, product_name):\n","        if product_name in self.items:\n","            del self.items[product_name]\n","\n","    def update_count(self, product_name, count):\n","        if product_name in self.items:\n","            if count <= 0:\n","                self.remove_product(product_name)\n","            else:\n","                self.items[product_name]['count'] = count\n","\n","    def get_total(self):\n","        return sum(item['product'].price * item['count'] for item in self.items.values())\n","\n","\n","if __name__ == \"__main__\":\n","    product1 = Product(\"Сomputer\", 10000, 5, \"Electronics\")\n","    product2 = Product(\"Ring\", 20000, 10, \"Accessories\")\n","\n","    customer = Customer(\"Олег Кузнецов\", \"Oleg@mail.com\")\n","    cart = ShoppingCart()\n","\n","    cart.add_product(product1, 2)\n","    cart.add_product(product2, 1)\n","\n","    order = Order()\n","    for item in cart.items.values():\n","        order.add_item(item['product'], item['count'])\n","\n","    print(f\"Общая стоимость заказа: {order.total:.2f}\")\n","\n","    discount = order.apply_discount(5)\n","    print(f\"Скидка: {discount:.2f}, Стоимость с учетом скидки: {order.total:.2f}\")\n","\n","    tax = order.calculate_tax(3)\n","    print(f\"Налог: {tax:.2f}, Общая стоимость с учетом налога: {order.total:.2f}\")\n","\n","    customer.add_order(order)\n","\n","    print(f\"История заказов клиента {customer.name}:\")\n","    for order in customer.order_history:\n","        print([f\"{item[0].name} - {item[1]} шт.\" for item in order.items])\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732785514378,"user_tz":-300,"elapsed":266,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"6ed2a01d-be51-4b37-985f-b321b4e220c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Общая стоимость заказа: 40000.00\n","Скидка: 2000.00, Стоимость с учетом скидки: 38000.00\n","Налог: 1140.00, Общая стоимость с учетом налога: 39140.00\n","История заказов клиента Олег Кузнецов:\n","['Сomputer - 2 шт.', 'Ring - 1 шт.']\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["class SpaceShip:\n","    def __init__(self, fuel, hull_condition, speed):\n","        self.fuel = fuel\n","        self.hull_condition = hull_condition\n","        self.speed = speed\n","\n","    def refuel(self, amount):\n","        self.fuel += amount\n","        return f\"Корабль заправлен на {amount} единиц топлива\"\n","\n","    def update_speed(self, new_speed):\n","        self.speed = new_speed\n","        return f\"Cкорость корабля изменена на {self.speed}\"\n","\n","    def check_status(self):\n","        return f\"Топливо {self.fuel}, cостояние корпуса {self.hull_condition},\\\n"," cкорость {self.speed}\"\n","\n","\n","class CrewMember:\n","    def __init__(self, name, health, skills, role):\n","        self.name = name\n","        self.health = health\n","        self.skills = skills\n","        self.role = role\n","\n","    def perform_skill(self):\n","        return f\"{self.name} выполняет навык {self.skills}\"\n","\n","    def take_damage(self, damage):\n","        self.health -= damage\n","        return (f\"{self.name} получил {damage} урона,\\\n"," текущее здоровье {self.health}\")\n","\n","\n","class Mission:\n","    def __init__(self, goals, resources, events):\n","        self.goals = goals\n","        self.resources = resources\n","        self.events = events\n","\n","    def start_mission(self):\n","        return f\"Миссия началась {self.goals} ресурсы {self.resources}\"\n","\n","    def trigger_event(self, event):\n","        if event in self.events:\n","            return f\"Событие произошло {event}\"\n","        else:\n","            return f\"Непредвиденное событие {event}\"\n","\n","\n","spaceship = SpaceShip(100,'нормальное', 10)\n","crew_member = CrewMember(\"Алекс\", 100, \"пилотирование\",\"пилот\")\n","mission = Mission(\"Исследование Марса\",\"nопливо, еда\",\\\n","[\"встреча с МКС\", \"поломка оборудования\"])\n","\n","print(spaceship.check_status())\n","print(crew_member.perform_skill())\n","print(mission.start_mission())\n","print(mission.trigger_event(\"Столкновение с планетой\"))\n","print(spaceship.refuel(50))\n","print(spaceship.update_speed(10))"],"metadata":{"id":"4NyrOOy8B9ED","executionInfo":{"status":"ok","timestamp":1733910217706,"user_tz":-300,"elapsed":274,"user":{"displayName":"Дарья Иванова","userId":"14793641154921052260"}},"outputId":"adc33373-a2f3-4d9a-8322-2ac93d7c61c4","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Топливо 100, cостояние корпуса нормальное, cкорость 10\n","Алекс выполняет навык пилотирование\n","Миссия началась Исследование Марса ресурсы nопливо, еда\n","Непредвиденное событие Столкновение с планетой\n","Корабль заправлен на 50 единиц топлива\n","Cкорость корабля изменена на 10\n"]}]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}